





//transition is the production rules. takes a symbol, returns an array of symbols. we will assume chomsky normal form (ie return array has two elements) for simplicity below.
var transition = function(symbol) {
    
}


//here is the usual way of doing PCFGs: tree unfold composed with flatten, which amounts to recursively computing yields of subspans and concatenating them.


var pcfg = function(symbol) {
    terminal(symbol) ? [symbol] : expand(transition(symbol))
}

var combine = function(a,b){return a.concat(b)}

var expand = function(symbols) {
    return combine(pcfg(symbols[0]), pcfg(symbols[1]))
}


//if we want the yield and a meaning function:
var combine = function(a,b){return [a[0].concat(b[0]), applyto(a[1],b[1])]}







/* versions that don't assume chomsky normal form,...*/

var pcfg = function(symbol) {
    terminal(symbol) ? [symbol] : expand(transition(symbol))
}

var expand(symbols) {
    return symbols.length==0 ? [] : pcfg(symbols[0]).concat(expand(symbols.slice(1)))
}

Enumerate(function(){
            var y = pcfg("start")
            factor(y.slice(0,2) == "hi there".split(" ") ?0:-Infinity) //yield starts with "hi there"
            return y[2] //distribution on next word?
          }, 100)
            

//now here's another formulation that explicitly passes the yield forward.

var pcfg = function(symbol, yieldsofar) {
    terminal(symbol) ? yieldsofar.concat([symbol]) : expand(transition(symbol), yieldsofar)
}

var expand(symbols, yieldsofar) {
    return symbols.length==0 ? yieldsofar : expand(symbols.slice(1), pcfg(symbols[0], yieldsofar))
}







//this version can