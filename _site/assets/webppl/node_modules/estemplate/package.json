{
  "name": "estemplate",
  "version": "0.1.1",
  "main": "lib/estemplate.js",
  "description": "Proper JavaScript code templating with source maps support.",
  "keywords": [],
  "homepage": "https://github.com/RReverser/estemplate",
  "bugs": {
    "url": "https://github.com/RReverser/estemplate/issues"
  },
  "author": {
    "name": "Ingvar Stepanyan",
    "email": "me@rreverser.com",
    "url": "https://github.com/RReverser"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/RReverser/estemplate"
  },
  "license": "MIT",
  "files": [
    "lib"
  ],
  "devDependencies": {
    "escodegen": "^1.3.3",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-nodeunit": "^0.3.3",
    "grunt-contrib-watch": "^0.6.1",
    "jshint-stylish": "^0.2.0",
    "load-grunt-tasks": "^0.4.0",
    "time-grunt": "^0.3.1"
  },
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "esprima": "^1.2.2",
    "estraverse": "^1.5.0"
  },
  "readme": "# estemplate [![Build Status](https://secure.travis-ci.org/RReverser/estemplate.png?branch=master)](http://travis-ci.org/RReverser/estemplate)\n\n> Proper JavaScript code templating with source maps support.\n\nThis module allows to generate JavaScript AST from code template and AST nodes as substitutions.\n\nThis is more proper way of code templating since it works on AST not on code string, and thus preserves locations which allow to generate source maps in future.\n\n## Getting Started\nInstall the module with: `npm install estemplate` and require it:\n\n```shell\nnpm i estemplate --save\n```\n\n```javascript\nvar estemplate = require('estemplate');\n```\n\n## API\n\n### estemplate(tmplString, [options], data)\n\nGenerates Spidermonkey AST from given template string, optional [esprima](http://esprima.org/doc/index.html) options and data.\n\nTemplate string should be JavaScript code with `<% ...execute me... %>` markers for compile-time calculations and `<%= ...insert me... %>` markers for node substitutions (adapted ERB/Underscore/etc. style).\n\n### estemplate.compile(tmplString, [options])\n\nSame as above but returns function that can be reused for AST generation (just save result and call with `data` as argument whenever needed).\n\n## Examples\n\n### Simple generation\n\n```javascript\nvar ast = estemplate('var <%= varName %> = <%= value %> + 1;', {\n  varName: {type: 'Identifier', name: 'myVar'},\n  value: {type: 'Literal', value: 123}\n});\n\nconsole.log(escodegen.generate(ast));\n// > var myVar = 123 + 1;\n```\n\n### Advanced generation (preserving locations and file names)\n\n> template.jst\n\n```javascript\n/** Simplified CommonJS wrapper */\n\ndefine(function (require, exports, module) {\n<%= block %>\n});\n```\n\n> index.js\n\n```javascript\nvar dependency1 = require('dependency1'),\n    dependency2 = require('dependency2');\n\nmodule.exports = function () {\n\treturn dependency1() + dependency2();\n};\n```\n\n> main code\n\n```javascript\n// synchronously reading wrapper template and code (for example purposes only)\n\nvar template = fs.readFileSync('template.jst', 'utf-8');\nvar programBlock = esprima.parse(fs.readFileSync('index.js', 'utf-8'), {loc: true, source: 'index.js'});\n\n// changing Program to BlockStatement so it could be injected\nprogramBlock.type = 'BlockStatement';\n\n// generate resulting AST with preserved locations and file names\nvar ast = estemplate(template, {loc: true, source: 'template.jst', attachComment: true}, {\n\tblock: programBlock\n});\n\n// generate code and source map as {code, map}\nvar output = escodegen.generate(ast, {comment: true, sourceMap: true, sourceMapWithCode: true});\n\nconsole.log(output.code);                                                           \n```\n\n> output\n\n```javascript\n/** Simplified CommonJS wrapper */                                                  \ndefine(function (require, exports, module) {                                        \n    var dependency1 = require('dependency1'), dependency2 = require('dependency2'); \n    module.exports = function () {                                                  \n        return dependency1() + dependency2();                                       \n    };                                                                              \n});                      \n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## License\nCopyright (c) 2014 Ingvar Stepanyan. Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "estemplate@0.1.1",
  "_shasum": "848717d74000a45cdfe300126e893c665d865ffd",
  "_from": "estemplate@",
  "_resolved": "https://registry.npmjs.org/estemplate/-/estemplate-0.1.1.tgz"
}
