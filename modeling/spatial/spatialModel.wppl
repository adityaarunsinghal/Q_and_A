///fold:
var KL = function(erpTrue, erpApprox){                       
  var values = erpTrue.support([]);                          
  return sum(map(                                            
    function(value){                                         
      var scoreP = erpTrue.score(value);                     
      var scoreQ = erpApprox.score(value);                   
      var probP = Math.exp(scoreP);                          
      return probP == 0.0 ? 0.0 : probP * (scoreP - scoreQ); 
    }, values));                                             
};

//   ---------------
// | World knowledge |
//   ---------------

var rows = ['A', 'B', 'C'];
var cols = ['1', '2', '3'];

var bomb = function() {
  return flip() ? 'safe' : 'unsafe';
}

// We exclude worlds where any goal is a priori impossible
// to achieve (this is also important for efficiency...)
var worldPrior = Infer({method: 'enumerate'}, function(){
  var world = {
    'A1' : bomb(), 'A2' : bomb(), 'A3' : bomb(),
    'B1' : bomb(), 'B2' : bomb(), 'B3' : bomb(),
    'C1' : bomb(), 'C2' : bomb(), 'C3' : bomb()
  };
  // condition(qa.completeCol('1', world) || qa.completeCol('2', world) || qa.completeCol('3', world));
  // condition(qa.completeRow('A', world) || qa.completeRow('B', world) || qa.completeRow('C', world));
 return world;
});

//  -------------------
// | Question knowledge |
//  -------------------

var questionPrior = Infer({method: 'enumerate'}, function(){
  var row = uniformDraw(rows);
  var col = uniformDraw(cols);  
  return 'is_' + row + col + '_safe?';
});

//  -----------------
// | Answer knowledge |
//  -----------------

var answers = _.flattenDeep(map(function(row) {
  map(function(col) {
    map(function(status) {
      return row + col + '_' + status;
    }, ['safe', 'unsafe']);
  }, cols);
}, rows));

// Allow 1 or 2 pieces of information...
var shortAnswers = map(function(v){return [v]}, answers);
var longAnswers = _.uniq(Infer({method: 'enumerate'}, function() {
  var answer1 = uniformDraw(answers);
  var a1cell = answer1.split('_')[0];
  var answer2 = uniformDraw(_.without(answers, a1cell + '_safe', a1cell + '_unsafe'));
  return sort([answer1, answer2]);
}).support());

var answerPrior = Categorical({vs : shortAnswers.concat(longAnswers)});

// this cuts out answers that are literally false (mostly for
// computaitonal efficiency reasons)
var makeTruthfulAnswerPrior = dp.cache(function(question, trueWorld) {
  var cellAskedAbout = question.split("_")[1];
  var validAnswers = filter(function(answer) {
    var isTrue = all(function(v){return trueWorld[v.split('_')[0]] == v.split('_')[1]},
		     answer);
    var responds = any(function(v){return v.split('_')[0] == cellAskedAbout}, answer);
    return isTrue && responds;
  }, answerPrior.support());
  return Categorical({vs: validAnswers});
});

//  ------
// | QUDs |
//  ------

var qudPrior = function(){
  var type = flip() ? 'rows' : 'cols';
  return type == 'cols' ? cols : rows// uniformDraw(cols) : uniformDraw(rows);
};

var QUDPosteriorFromMeaning = function(question) {
  if(_.includes(questionPrior.support(), question))
    return Delta({v: [qa.butLast(question).split('_')[1]]});
  else
    console.error('unknown question' + question);
};

var QUDPosteriorFromInference = dp.cache(function(question, gridState){
  return Infer({method: 'enumerate'}, function() {
    var qudName = qudPrior();
    observe(questioner('explicit', qudName, gridState), question);
    return qudName;
  });
});

//  -------
// | Models |
//  -------

var spatialLocationQUD = function(qudName) {
  return function(world){
    return (_.includes(cols, qudName) ? qa.completeCol(qudName, world) :
	    _.includes(rows, qudName) ? qa.completeRow(qudName, world) :
	    qa.cellMatch(qudName, world));
  };
};

var spatialNameToQUD = function(qudName){
  if(qudName == 'identity') 
    return function(w) {return w;};
  else if(qudName.length > 1) {
    return function(w) {any(function(qud) { return spatialLocationQUD(qud)(w);}, qudName)};
  } else {
    return spatialLocationQUD(qudName);
  }
};

var getPriorProb = dp.cache(function(worldPrior, goal) {
  var qud = spatialNameToQUD(goal);                                              
  return Infer({method: 'enumerate'}, function() {
    var world = sample(worldPrior);
    return qud(world);
  });
});

var spatialLocationAnswerMeaning = function(utterance){
  return function(world){
    return all(function(v) {
      var components = v.split('_');
      return world[components[0]] === components[1];
    }, utterance);
  };
};

// Note that in principle we should be conditioning on hearing back from
// answerer here, but in this case, they are equivalent
// var A = answerer(type, question, world, gridState);
var getPosteriorProb = dp.cache(function(worldPrior, type, answer, goal) {
  var qud = spatialNameToQUD(goal);
  var meaning = spatialLocationAnswerMeaning(answer);
  return Infer({method: 'enumerate'}, function(){
    var world = sample(worldPrior);
    condition(meaning(world));
    return qud(world);
  });
});

var Qrationality = 100;
var Arationality = 100;

// This takes subset of worlds where the 'known' revealed cells
// are true (i.e. when people start with a map, or after revealing more)
var makeConsistentWorldPrior = dp.cache(function(gridState) {
  return Categorical({vs : filter(function(w) {
    return all(function(v) {return w[v] == 'safe';}, gridState);
  }, worldPrior.support())});
});

var questioner = dp.cache(function(type, goal, gridState) {
  var consistentWorldPrior = makeConsistentWorldPrior(gridState);
  return Infer({method: 'enumerate'}, function() {
    var question = sample(questionPrior);
    var trueGoal = goal;
    console.log('thinking about question ' + question + ' with goal ' + trueGoal);
    
    var utility = expectation(consistentWorldPrior, function(trueWorld) {
      var possibleAnswer = answerer(type, question, trueWorld, gridState);
      var infGain = expectation(possibleAnswer, function(answer){
	var priorProb = getPriorProb(consistentWorldPrior, trueGoal);
	var posteriorProb = getPosteriorProb(consistentWorldPrior, type, answer, trueGoal); 
	return KL(posteriorProb, priorProb);
      });
      return infGain;
    });
    factor(utility * Qrationality);
    return question;
  });
});

var interpreter = dp.cache(function(answer, consistentWorldPrior){
  return Infer({method: 'enumerate'}, function(){
    var world = sample(consistentWorldPrior);
    var answerMeaning = spatialLocationAnswerMeaning(answer);
    condition(answerMeaning(world));
    return world;
  });
});

var answerer = dp.cache(function(type, question, trueWorld, gridState) {
  var consistentWorldPrior = makeConsistentWorldPrior(gridState);
  var truthfulAnswerPrior = makeTruthfulAnswerPrior(question, trueWorld);
  var qudPosterior = (
    type === 'pragmatic' ? QUDPosteriorFromInference(question, gridState) :
      type === 'explicit' ? QUDPosteriorFromMeaning(question) :
      type === 'literal' ? Delta({v: 'identity'}) :
      console.error('type not recognized')
  );
  if(type == 'pragmatic') {
    console.log('qud posterior for question ' + question);
    console.log(qudPosterior);
  }
  return Infer({method: 'enumerate'}, function(){
    var localQUD = spatialNameToQUD(sample(qudPosterior));
    var answer = sample(truthfulAnswerPrior);
    var possibleWorlds = interpreter(answer, consistentWorldPrior);
    var newUtility = expectation(possibleWorlds, function(w) {
      return localQUD(w) == localQUD(trueWorld);
    });
    factor(newUtility * Arationality);      
    return answer;
  });
});

var validate = function(initRevealed, underlying) {
  return !allRevealed(initRevealed) && colRowExists(underlying);
};

var completeRow = function (grid) {
  return qa.completeRow('A', grid) || qa.completeRow('B', grid) || qa.completeRow('C', grid);
};

var completeCol = function (grid) {
  return qa.completeCol('1', grid) || qa.completeCol('2', grid) || qa.completeCol('3', grid);
};

var colRowExists = function(grid) {
  return completeRow(grid) && completeCol(grid);
}

var allRevealed = function (listRevealed) {
  var rowsRevealed = map(function(v) {
    return filter(function(cell) {
      return cell[0] == v;
    }, listRevealed).length;
  }, ['A', 'B', 'C']);

  var colRevealed = map(function(v) {
    return filter(function(cell) {
      return cell[1] == v;
    }, listRevealed).length;
  }, ['1', '2', '3']);
  return (any(function(v) {return v == 3}, rowsRevealed) ||
	  any(function(v) {return v == 3}, colRevealed));
}
  
var possibleItem = Infer({method: 'enumerate'}, function() {
  var world = sample(worldPrior);
  var initState = uniformDraw(qa.powerset(filter(function(v){return world[v] == 'safe'}, _.keys(world))));
  condition(validate(initState, world));
  return {world, initState};
});

var initState = sample(possibleItem)['initState'];
console.log(initState);
//console.log(questioner('pragmatic', ['A', 'B', 'C'], initState));
//console.log(questioner('explicit', ['A', 'B', 'C'], ['B1', 'B3', 'C2' ]));
var w = makeConsistentWorldPrior(['B1', 'B3', 'C2' ]);
console.log(answerer('explicit', 'is_B2_safe?', sample(w), ['B1', 'B3', 'C2' ]));
				       
// var trueGoal = qudPrior();
// var trueWorld = {'A1' : 'safe', 'A2' : 'unsafe', 'A3' : 'safe',
// 		 'B1' : 'safe', 'B2': 'safe', 'B3': 'safe',
// 		 'C1' : 'unsafe' , 'C2' : 'unsafe', 'C3' : 'safe'};
// console.log(trueWorld);
// console.log(answer);
//answerer('explicit', ['A', 'B', 'C'], ['C1']);
//questioner('explicit', ['A', 'B', 'C'], ['C3']);
//answerer('pragmatic', 'is_A2_safe?', trueWorld, ['A1']);


// Infer({method: 'enumerate', model: function() {
//   var item = sample(possibleItem);
//   var trueWorld = item.world;
//   var initState = item.initState;
//   var goal = qudPrior();
//   var goalString = _.includes(goal, 'A') ? 'rows' : 'columns';
//   qa.writeSpatialQuestioner('spatialQuestionerOutput.csv',
// 			    [JSON.stringify(trueWorld), initState, goalString],
// 			    questioner('explicit', goal, initState));
// }});
//maketruthfulanswerprior('is_A1_safe?', trueWorld);
//console.log(answerer('explicit', 'is_A2_safe?', trueWorld, ['A1']));
// console.log(qa.spatialA1Score(answer, 'is_A1_safe?', trueWorld, {answers: truthfulAnswerPrior.support(), worldPrior: worldPrior, rationality: Arationality}));
// console.log(trueWorld);
// console.log(answer);
//questioner('explicit', ['A', 'B', 'C'], ['A1']);
//answerer('pragmatic', 'is_B1_safe?', trueWorld, []);
