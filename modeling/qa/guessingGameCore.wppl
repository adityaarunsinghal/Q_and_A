var uniformDraw = function (xs) {
  return xs[randomInteger(xs.length)];
};

var mean = function(thunk){
  return expectation(Enumerate(thunk), function(v){return v;});
};

var negate = function(predicate){
  return function(x){
    return !predicate(x);
  };
};

var identity = function(x){
 return x;
};

var condition = function(x){
 factor(x ? 0 : -Infinity);
};

// Takes a taxonomy object with saliency probabilities
// and picks one item from each label to be 'the salient one'
var sampleSalienceAssignment = function(tax) {
  return mapObject(function(label, probObj) {
    var saliencyPrior = categoricalERP(_.values(probObj), _.keys(probObj));
    var salientItem = sample(saliencyPrior);
    return _.object([salientItem], [null]);
  }, tax);
};

var QAmodel = function(conditionObj) {
  var taxonomy = conditionObj.taxonomy;
  var qudSpace = conditionObj.qudSpace;
  var labelSpace = conditionObj.labelSpace;
  var exampleWorld = conditionObj.exampleWorld;
  var locationAssignments = qa.permute([1,2,3,4]);
  // set up world space:
  // 1) All possible assignments of four objects to four positions
  // 2) Also assignments of salience to different objects for each category

  var questionSpace = map(function(v){
    return 'whereIs' + v.charAt(0).toUpperCase() + v.slice(1) + '?';
  }, labelSpace);

  // Can tell questioner about a location of one object
  var fullAnswerSpace = qa.flatten(map(function(leaf){
    map(function(loc){
      return leaf + '@' + loc + ".";
    }, [1,2,3,4]);
  }, qa.leaves(taxonomy)));

  var worldPrior = function() {
    var locAssignment = uniformDraw(locationAssignments);
    var tax = sampleSalienceAssignment(taxonomy);
    return {knowledge : tax,
	    locations : _.object(qa.leaves(tax), locAssignment)};
  };

  // returns a function that maps world to the gate we should pick to find
  // a leaf under the given node
  var makeQUD = function(node){
    var subtree = qa.findSubtree(node, taxonomy);
    var leavesBelowNode = subtree === null ? [node] : qa.leaves(subtree);
    return function(world){
       _.object(map(function(node) {return world[node];}, leavesBelowNode),
		map(function(node) {return false;}, leavesBelowNode));
    };
  };

  // These are the objects the questioner might be interested in
  var qudNodePrior = function() {
    return uniformDraw(qudSpace);
  };

  var questionPrior = function() {
    return uniformDraw(questionSpace);
  };

  var questionToNode = function(utterance){
    var temp = qa.butLast(utterance).split("Is");
    var node = temp[1].toLowerCase();
    return node;
  };

  var fullAnswerPrior = function(){
    return uniformDraw(fullAnswerSpace);
  };

  var isTaxonomyQuestion = function(x){
    var testableX = (last(x) === '?') ? x.split("Is")[1].toLowerCase() : x;
    return (last(testableX) === '?') & (qa.isNodeInTree(qa.butLast(testableX), taxonomy));
  };

  var taxonomyQuestionMeaning = cache(function(utterance){
    var node = questionToNode(utterance);
    var subtree = qa.findSubtree(node, taxonomy);
    var leavesBelowNode = subtree === null ? [node] : qa.leaves(subtree);
    return function(world){
      return _.object(map(function(node) {return world[node];}, leavesBelowNode),
		      map(function(node) {return false;}, leavesBelowNode));
    };
  });

  var isTaxonomyAnswer = cache(function(x){
    return (last(x) === '.') & (qa.isNodeInTree(qa.butLast(x).split("@")[0], taxonomy));
  });

  var taxonomyAnswerMeaning = cache(function(utterance){
    var temp = utterance.split("@");
    var node = temp[0];
    var location = qa.butLast(temp[1]);
    return function(x){
      return x[node] == location; // return true if the object really is in location
    };
  });

  var meaning = cache(function(utterance){
    return (isTaxonomyQuestion(utterance) ? taxonomyQuestionMeaning(utterance) :
            isTaxonomyAnswer(utterance) ? taxonomyAnswerMeaning(utterance) :
            utterance === 'null' ? function(w){return true;} :
            undefined);
  });

  var getFitnessVals = function(labelVal) {
    var labeledSubtree = qa.findSubtree(labelVal, taxonomy);
    return map(function(objectVal) {
      // match if object is a decendent of the labelVal 
      // have to hack it a bit if the label is a leaf of the tree
      var match = (labeledSubtree == null  
                   ? objectVal == labelVal 
                   : qa.isNodeInTree(objectVal, labeledSubtree));
      // will eventually want to sample instead of fixing at 0...
      return match ? 0 : -Infinity;
    }, qudSpace);
  };

  var fitnessMat = function() {
    reduce(function(labelVal, memo) {
      var innerDict = _.object(qudSpace, getFitnessVals(labelVal));
      return _.extend(memo, _.object([[labelVal,innerDict]]));
    }, {}, labelSpace);
  };

  // For "x@n."-style answers, the question doesn't play any role.
  var interpreter = cache(function(answer){
    return Enumerate(function(){
      var world = worldPrior();
      var answerMeaning = meaning(answer);
      condition(answerMeaning(world));
      return world;
    });
  });

  var literalAnswerer = cache(function(question, trueWorld, rationality) {
    // Pick answer conditioned on communicating question predicate value
    return Enumerate(function(){
      var answer = fullAnswerPrior();
      factor(interpreter(answer).score([], trueWorld) * rationality);
      return answer;
    });
  });

  var literalQuestioner = cache(function(qud_node, rationality) {
    var qud = (makeQUD(qud_node));
    Enumerate(function(){
      var question = questionPrior();
      var prior = Enumerate(function(){return qud(worldPrior());});
      var expectedKL = mean(function(){
        var trueWorld = worldPrior();
        var answer = sample(literalAnswerer(question, trueWorld, rationality));
        var posterior = Enumerate(function(){
          var world = sample(interpreter(answer));
          return qud(world);
        });
        return qa.KL(posterior, prior);
      });
      factor(expectedKL * rationality);
      return question;
    });
  });

  var explicitAnswerer = cache(function(question, trueWorld, rationality) {
    var qud = makeQUD(questionToNode(question));
    return Enumerate(function(){
      var truthfulAnswerPrior = Enumerate(function(){
        var answer = fullAnswerPrior();
        factor(interpreter(answer).score([], trueWorld));
        return answer;
      });
      var answer = sample(truthfulAnswerPrior);
      var score = mean(function(){
        var inferredWorld = sample(interpreter(answer));
        var inferredLocs = qud(inferredWorld);
        var trueLocs = qud(trueWorld);
	// console.log(inferredLocs, trueLocs);
	// console.log(_.isEqual(inferredLocs, trueLocs));
        return (_.isEqual(trueLocs, inferredLocs) ? 1 : 0);
      });
      factor(Math.log(score) * rationality);
      return answer;
    });
  });
  
  
  var explicitQuestioner = cache(function(qud_node, rationality) {
    var qud = makeQUD(qud_node);
    return Enumerate(function(){
      var question = questionPrior();
      // What is the gate value I'd guess under my prior?
      var prior = Enumerate(function(){
        return qud(worldPrior());
      });
      var expectedKL = mean(
        function(){
          // What do I expect the world to be like?
          var trueWorld = worldPrior();
          // If I ask this question, what answer do I expect to get,
          // given what the world is like?
          var answer = sample(explicitAnswerer(question, trueWorld, rationality));
          var posterior = Enumerate(function(){
            // Given this answer, how would I update my distribution on worlds?
            var world = sample(interpreter(answer));
            // What is the value of the predicate I care about under
            // this new distribution on worlds?
            return qud(world);
          });
          return qa.KL(posterior, prior);
        });
      factor(expectedKL * rationality);
      return question;
    });
  });

  var pragmaticAnswerer = cache(function(question, trueWorld, rationality){
    var qudNodePosterior = Enumerate(function(){
      var qudNode = qudNodePrior();
      var q_erp = explicitQuestioner(qudNode, rationality);
      factor(q_erp.score([], question) * 4); // This is arbitrarily set -- 1 doesn't give full range of predictions
      return qudNode;
    });
    return Enumerate(function(){
      var qud = makeQUD(sample(qudNodePosterior));
      // Pick answer conditioned on communicating question predicate value

      var truthfulAnswerPrior = Enumerate(function(){
        var answer = fullAnswerPrior();
        factor(interpreter(answer).score([], trueWorld));
        return answer;
      });
      var answer = sample(truthfulAnswerPrior);
      var score = mean(function(){
        var inferredWorld = sample(interpreter(answer));
        var inferredLocs = qud(inferredWorld);
        var trueLocs = qud(trueWorld);
        return (_.isEqual(trueLocs, inferredLocs) ? 1 : 0);
      });
      factor(Math.log(score) * rationality);
      return answer;
    });
  });

  var pragmaticQuestioner = cache(function(qud_node, rationality) {
    var qud = (makeQUD(qud_node));
    Enumerate(function(){
      var question = questionPrior();
      // What is the gate value I'd guess under my prior?
      var prior = Enumerate(function(){
        return qud(worldPrior());
      });
      var expectedKL = mean(
        function(){
          // What do I expect the world to be like?
          var trueWorld = worldPrior();
          // If I ask this question, what answer do I expect to get,
          // given what the world is like?
          var answer = sample(pragmaticAnswerer(question, trueWorld, rationality));
          var posterior = Enumerate(function(){
            // Given this answer, how would I update my distribution on worlds?
            var world = sample(interpreter(answer));
            // What is the value of the predicate I care about under
            // this new distribution on worlds?
            return qud(world);
          });
          return qa.KL(posterior, prior);
        });
      factor(expectedKL * rationality);
      return question;
    });
  });
  return {qudSpace : qudSpace,
          questionSpace : questionSpace,
          exampleWorld : exampleWorld,
          pragQ : pragmaticQuestioner,
          litQ : literalQuestioner,
          expQ: explicitQuestioner,
          pragA : pragmaticAnswerer,
          litA : literalAnswerer,
          expA: explicitAnswerer};
};

