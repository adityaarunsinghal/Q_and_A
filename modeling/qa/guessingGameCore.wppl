var foreach = function(lst, fn) {
  var foreach_ = function(i) {
    if (i < lst.length) {
      fn(lst[i]);
      foreach_(i + 1);
    }
  };
  foreach_(0);
};

var questionToNode = dp.cache(function(utterance){
  var temp = qa.butLast(utterance).split("Is");
  var node = temp[1].toLowerCase();
  return node;
});

var locationAssignments = qa.permute([1,2,3,4]);

var taxonomyAnswerMeaning = dp.cache(function(utterance){
  var temp = utterance.split("@");
  var node = temp[0];
  var location = qa.butLast(temp[1]);
  return function(world){
    return world[node] == location; 
  };
});

var isTaxonomyAnswer = dp.cache(function(qudSpace, x){
  return ((last(x) === '.') &
          (_.includes(qudSpace, qa.butLast(x).split("@")[0])));
});

// our model has two parameters: rationality controls how strongly
// optimizing an agent is; beta controls to what extent participants draw from an
// empirical prior (1) vs. a uniform prior (0) on saliency. 
var QAmodel = function(type, domain, rationality,  beta) {
  var knowledge = qa.buildKnowledge(type, domain);
  var unifTaxonomy = knowledge.unifTaxonomy;
  var empTaxonomy = knowledge.empTaxonomy;
  var qudSpace = knowledge.qudSpace;
  var labelSpace = knowledge.labelSpace;
  
  // To cut down on computational complexity, we fix a location assignment
  var exampleWorld = _.zipObject(qudSpace, [1,2,3,4]);
  
  var meaning = dp.cache(function(utterance){
    return (isTaxonomyAnswer(qudSpace, utterance) ? taxonomyAnswerMeaning(utterance) :
            utterance === 'null' ? function(w){return true;} :
            console.error('unknown utterance: ' + utterance));
  });
  
  // Takes a taxonomy object with saliency probabilities
  // and picks one item from each label to be 'the salient one'
  var sampleSalienceAssignment = function() {
    var tax = flip(beta) ? empTaxonomy : unifTaxonomy;
    return mapObject(function(label, probObj) {
      var vals = _.values(probObj);
      var salientItem = categorical(vals, _.keys(probObj));
      return salientItem;
    }, tax);
  };
  
  var worldPrior = function() {
    var locAssignment = uniformDraw(locationAssignments);
    return _.zipObject(qudSpace, locAssignment);
  };
  
  var questionPrior = function() {
    var v = uniformDraw(labelSpace);
    return 'whereIs' + v.charAt(0).toUpperCase() + v.slice(1) + '?';
  };
  
  var questionSpace = Infer({method: 'enumerate'}, function(){
    return questionPrior();
  }).support();
  
  var answerPrior = function(){
    var loc = uniformDraw([1,2,3,4]);
    var leaf = uniformDraw(qudSpace);
    return leaf + '@' + loc + ".";
  };
  
  var makeGoalFromName = function(node) {
    return function(world){
      return world[node];
    };
  };

  var qudPrior = function() {
    return uniformDraw(qudSpace);
  };

  var QUDPosteriorFromMeaning = dp.cache(function(question) {
    return Infer({method: 'enumerate'}, function() {
      var node = questionToNode(question);
      var salienceGuess = sampleSalienceAssignment();
      return salienceGuess[node];
    });
  });
  
  var QUDPosteriorFromInference = dp.cache(function(question){
    return Infer({method: 'enumerate'}, function() {
      var qudName = qudPrior();
      var q_erp = questioner('Q1', qudName);
      observe(q_erp, question);
      return qudName;
    });
  });

  var interpreter = dp.cache(function(answer){
    return Infer({method: 'enumerate'}, function(){
      var world = worldPrior();
      var answerMeaning = meaning(answer);
      condition(answerMeaning(world));
      return world;
    });
  });
  
  var makeTruthfulAnswerPrior = dp.cache(function(trueWorld) {
    return Infer({method: 'enumerate'}, function(){
      var answer = answerPrior();
      factor(interpreter(answer).score(trueWorld));
      return answer;
    });
  });
  
  var getProjectedWorldPrior = dp.cache(function(qudName) {
    return Infer({method: 'enumerate'}, function(){
      var qud = makeGoalFromName(qudName);
      return qud(worldPrior());
    });
  });
  
  
  var questioner = dp.cache(function(questionerType, qudName) {
    var answererType = (questionerType === 'Q2' ? 'A2' :
			questionerType === 'Q1' ? 'A1' : 'A0');
    return Infer({method: 'enumerate'}, function() {
      var question = questionPrior();
      var possibleAnswer = Infer({method: 'enumerate'}, function(){
        var trueWorld = worldPrior();
        return sample(answerer(answererType, question, trueWorld));
      });
      var infGain = function(answer){
        var prior = getProjectedWorldPrior(qudName);
        var posterior = Infer({method: 'enumerate'}, function(){
          var world = worldPrior();
          observe(answerer(answererType, question, world), answer);
          return makeGoalFromName(qudName)(world);
        });
        return qa.KL(posterior, prior);
      };
      factor(expectation(possibleAnswer, infGain) * rationality);
      return question;
    });
  });

  var answerer = dp.cache(function(answererType, question, trueWorld) {
    var qudPosterior = (answererType === 'A2' ? QUDPosteriorFromInference(question) :
                        answererType === 'A1' ? QUDPosteriorFromMeaning(question) :
                        answererType === 'A0' ? Delta({v: function(v) {return v;}}) :
                        console.error('type not recognized'));
    var truthfulAnswerPrior = makeTruthfulAnswerPrior(trueWorld);
    return Infer({method: 'enumerate'}, function(){
      var qud = makeGoalFromName(sample(qudPosterior));
      var answer = sample(truthfulAnswerPrior);
      var utility = expectation(interpreter(answer), function(possibleWorld) {
        return qud(possibleWorld) === qud(trueWorld);
      });
      factor(Math.log(utility) * rationality);      
      return answer;
    });
  });

  var runAnswererModel = cache(function(question, answererType) {
    // Want to know behavior marginalized across all possible world
    // because of symmetry, we can just use an example world...
    return Infer({method: 'enumerate'}, function() {
      var answer = sample(answerer(answererType, question, exampleWorld));
      return answer.split("@")[0] + ".";
    });
  });
  
  return {
    qudSpace : qudSpace,
    questionSpace : questionSpace,
    questioner : questioner,
    answerer : answerer,
    runAnswererModel: runAnswererModel
  };
};
