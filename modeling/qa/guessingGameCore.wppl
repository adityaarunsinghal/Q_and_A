var uniformDraw = function (xs) {
  return xs[randomInteger(xs.length)];
};

var mean = function(thunk){
  return expectation(Enumerate(thunk), function(v){return v;});
};

var negate = function(predicate){
  return function(x){
    return !predicate(x);
  };
};

var identity = function(x){
 return x;
};

var condition = function(x){
 factor(x ? 0 : -Infinity);
};

var QAmodel = function(conditionObj) {
  var taxonomy = conditionObj.taxonomy;
  var qudSpace = conditionObj.qudSpace;
  var labelSpace = conditionObj.labelSpace;
  var locationAssignments = qa.permute([1,2,3,4]);

  // Takes a taxonomy object with saliency probabilities
  // and picks one item from each label to be 'the salient one'
  var sampleSalienceAssignment = function(tax) {
    return mapObject(function(label, probObj) {
      var saliencyPrior = categoricalERP(_.values(probObj), _.keys(probObj));
      var salientItem = sample(saliencyPrior);
      return salientItem;
    }, tax);
  };
  
  var worldPrior = Enumerate(function() {
    //    var locAssignment = uniformDraw(locationAssignments);
    var locAssignment = uniformDraw(locationAssignments);
    var tax = sampleSalienceAssignment(taxonomy);
    return {knowledge : tax,
	    locs : _.object(qudSpace, locAssignment)};
  });

  var questionPrior = function() {
    var v = uniformDraw(labelSpace);
    return 'whereIs' + v.charAt(0).toUpperCase() + v.slice(1) + '?';
  };

  var questionSpace = Enumerate(function(){
    return questionPrior();
  }).support();
  
  var questionToNode = function(utterance){
    var temp = qa.butLast(utterance).split("Is");
    var node = temp[1].toLowerCase();
    return node;
  };

  var answerPrior = function(world){
    var loc = uniformDraw([1,2,3,4]);
    var leaf = uniformDraw(_.keys(world.locs));
    return leaf + '@' + loc + ".";
  };

  var isTaxonomyAnswer = function(x){
    return ((last(x) === '.') &
	    (_.contains(qudSpace, qa.butLast(x).split("@")[0])));
  };
  
  var taxonomyAnswerMeaning = function(utterance){
    var temp = utterance.split("@");
    var node = temp[0];
    var location = qa.butLast(temp[1]);
    return function(world){
      return world.locs[node] == location; 
    };
  };

    // returns a function that maps world to the gate we should pick to find
  // a leaf under the given node
  var makeQUD = function(node) {
    return function(world){
      var salientObj = world.knowledge[node];
      return world.locs[salientObj];
    };
  };
  
  var nameToQUD = function(qudName){
    return (_.contains(questionSpace, qudName) ? makeQUD(questionToNode(qudName)) :
	    _.contains(qudSpace, qudName) ? makeQUD(qudName) :
	    console.error('unknown qud name', qudName));
  };

  var qudPrior = function() {
    return uniformDraw(qudSpace);
  };
  
  var meaning = cache(function(utterance){
    return (isTaxonomyAnswer(utterance) ? taxonomyAnswerMeaning(utterance) :
            utterance === 'null' ? function(w){return true;} :
            undefined);
  });

  var interpreter = cache(function(answer){
    return Enumerate(function(){
      var world = sample(worldPrior);
      var answerMeaning = meaning(answer);
      condition(answerMeaning(world));
      return world;
    });
  });

  var makeTruthfulAnswerPrior = function(trueWorld) {
    var truthfulAnswerPrior = Enumerate(function(){
      var answer = answerPrior(trueWorld);
      factor(interpreter(answer).score([], trueWorld));
      return answer;
    });
    return truthfulAnswerPrior;
  };

  var literalAnswerer = cache(function(question, trueWorld, rationality) {
//    qa.printERP(worldPrior);
    return Enumerate(function(){
      var answer = answerPrior(trueWorld);
//      console.log(answer);
      factor(interpreter(answer).score([], trueWorld) * rationality);
      return answer;
    });
  });

  var literalQuestioner = cache(function(qud_node, rationality) {
    var qud = nameToQUD(qud_node);
    return Enumerate(function(){
      var question = questionPrior();
      var prior = Enumerate(function(){return qud(sample(worldPrior));});
      var expectedKL = mean(function(){
        var trueWorld = sample(worldPrior);
        var answer = sample(literalAnswerer(question, trueWorld, rationality));
        var posterior = Enumerate(function(){
          var world = sample(interpreter(answer));
          return qud(world);
        });
        return qa.KL(posterior, prior);
      });
      factor(expectedKL * rationality);
      return question;
    });
  });

  var explicitAnswerer = cache(function(question, trueWorld, rationality) {
    var qud = nameToQUD(question);
    return Enumerate(function(){
      var truthfulAnswerPrior = makeTruthfulAnswerPrior(trueWorld);
      var answer = sample(truthfulAnswerPrior);
      var score = mean(function(){
	var inferredWorld = sample(interpreter(answer));
	return (qud(trueWorld) == qud(inferredWorld) ? 1 : 0);
      });
      factor(Math.log(score) * rationality);
      return answer;
    });
  });

  var explicitQuestioner = cache(function(qudName, rationality) {
    var qud = nameToQUD(qudName);
    return Enumerate(function(){
      var question = questionPrior();
      var prior = Enumerate(function(){
	return qud(sample(worldPrior));});
      var expectedKL = mean(function(){
	var trueWorld = sample(worldPrior);
	var answer = sample(explicitAnswerer(question, trueWorld, rationality));
	var posterior = Enumerate(function(){
	  var world = sample(interpreter(answer));
	  return qud(world);
	});
	return KL(posterior, prior);
      });
      factor(expectedKL * rationality);
      return question;
    });
  });

  var pragmaticAnswerer = cache(function(question, trueWorld, rationality){
    var qudPosterior = Enumerate(function(){
      var qudName = qudPrior();
      var qud = nameToQUD(qudName);
      var q_erp = explicitQuestioner(qudName, rationality);
      factor(q_erp.score([], question));
      return qudName;
    });
    return Enumerate(function(){
      var qud = nameToQUD(sample(qudPosterior));
      var truthfulAnswerPrior = makeTruthfulAnswerPrior(trueWorld);
      var answer = sample(truthfulAnswerPrior);
      var score = mean(function(){
	var inferredWorld = sample(interpreter(answer));
	return (qud(trueWorld) == qud(inferredWorld)) ? 1.0 : 0.0;
      });
      factor(Math.log(score) * rationality);
      return answer;
    });
  });

  var pragmaticQuestioner = cache(function(qud_node, rationality) {
    var qud = nameToQUD(qud_node);
    return Enumerate(function(){
      var question = questionPrior();
      var prior = Enumerate(function(){
        return qud(sample(worldPrior()));
      });
      var expectedKL = mean(
        function(){
          var trueWorld = sample(worldPrior);
          var answer = sample(pragmaticAnswerer(question, trueWorld, rationality));
          var posterior = Enumerate(function(){
            var world = sample(interpreter(answer));
            return qud(world);
          });
          return qa.KL(posterior, prior);
        });
      factor(expectedKL * rationality);
      return question;
    });
  });

  var runAnswererModel = function(answererModel, question, rationality) {
    return Enumerate(function() {
//      console.log(question);
      var trueWorld = sample(worldPrior);
      var ansERP = answererModel(question, trueWorld, rationality);
      var ans = sample(ansERP);
      return ans.split("@")[0];
    });
  };
  
  return {qudSpace : qudSpace,
          questionSpace : questionSpace,
          pragQ : pragmaticQuestioner,
          litQ : literalQuestioner,
          expQ: explicitQuestioner,
          pragA : pragmaticAnswerer,
          litA : literalAnswerer,
          expA: explicitAnswerer,
	  runAnswererModel: runAnswererModel
	 };
};
