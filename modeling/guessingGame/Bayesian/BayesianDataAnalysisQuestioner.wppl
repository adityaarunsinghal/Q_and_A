// Run as:
// webppl genQuestionerPredictions.wppl --require ../qa

var data = qa.readCSV("../../../data/BayesianAnalysisInput.csv");
var types = ["branching", "overlapping", "equivocal"];
var domains = ["artifact", "animals", "places", "plants"];
var items = qa.cartesianProductOf([types, domains]);

var modelAnalysis = function() {
  // Sample params
  var rawAlpha = uniformDraw(_.range(0, 20, 0.05)),
      alpha = Number.parseFloat(rawAlpha.toFixed(3));
  var rawBeta = uniformDraw(_.range(0, 1.01, 0.05)),
      beta = Number.parseFloat(rawBeta.toFixed(3));
  var questionerType = uniformDraw(['literal', 'explicit', 'pragmatic']);

  globalStore.predictives = {};

  // Run model and condition on data
  var score = sum(map(function(item) {
    var model = QAmodel(item[0], item[1], alpha, beta);
    var questioner = model.questioner;    
    return sum(map(function(qud) {
      var itemData = qa.getSubset(data, {type: item[0], domain: item[1], goal: qud});
      var questionerERP = questioner(questionerType, qud);
      // Save predictives
      foreach(questionerERP.support(),function(s){
      	var strippedQuestion = qa.butLast(s).split("Is")[1].toLowerCase();
      	var key = [qud, item[0], item[1], strippedQuestion, alpha, beta, questionerType].join(",");
      	var newPair = _.zipObject([key], [Math.exp(questionerERP.score(s))]);
      	globalStore.predictives = extend(globalStore.predictives, newPair);
      });
      return sum(map(function(dataRow) {
       	return questionerERP.score("whereIs" + qa.capitalize(dataRow.question) + "?");
      }, itemData));
    }, model.qudSpace));
  }, items));

  console.log([alpha, beta, questionerType]);
  console.log(score);
  factor(score);
  return {predictive: globalStore.predictives,
	  params : {alpha: alpha, beta: beta,
		    modelType: questionerType}};
};

var outputERP = Infer({method: 'enumerate'}, modelAnalysis);

console.log('inference complete... printing');
qa.bayesianErpWriter(outputERP, "data/questioner_modelComparison");

