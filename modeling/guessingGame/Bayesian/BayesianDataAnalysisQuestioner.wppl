// Run as:
// webppl genQuestionerPredictions.wppl --require ../qa

var data = qa.readCSV("../../../MultiExperiment2/data/"
		      + "MultiExp2_BayesianAnalysisInput.csv");
var types = ["branching", "overlapping", "equivocal"];
var domains = ["artifact", "animals", "places", "plants"];
var items = qa.cartesianProductOf([types, domains]);

var modelAnalysis = function() {
  // Sample params
  var alpha = sample(UniformDrift({a: 0, b: 20, r: 2}));
  var beta = sample(UniformDrift({a: 0, b: 1, r: .1}));
  var expPragFlip = sample(Bernoulli({p: .5}));
  
  // Run model and condition on data
  var score = sum(map(function(item) {
    var model = QAmodel(item[0], item[1], alpha, beta);
    var runTFBTQuestioner = model.runTFBTQuestioner;
    return sum(map(function(qud) {
      var itemData = qa.getSubset(data, {type: item[0], domain: item[1], goal: qud});
      var questionerERP = runTFBTQuestioner(qud, expPragFlip);
      // Save predictives
      foreach(questionerERP.support(),function(s){
	var strippedQuestion = qa.butLast(s).split("Is")[1].toLowerCase();
	query.add([qud, item[0], item[1], strippedQuestion],
		  Math.exp(questionerERP.score(s)));
      });
      return sum(map(function(dataRow) {
       	return questionerERP.score("whereIs" + qa.capitalize(dataRow[3]) + "?");
      }, itemData));
    }, model.qudSpace));
  }, items));
  factor(score);
  return {predictive: query.table,
	  params : {alpha: alpha, beta: beta, expVsPrag: expPragFlip}};
};

var outputERP = Infer({method: "MCMC", samples: 10, burn: 0, verbose: true},
		      modelAnalysis);

console.log(outputERP.toJSON());
console.log('inference complete... printing');

qa.bayesianErpWriter(outputERP, "data/BayesianQuestionerAnalysis_Strict_");

