// Run as:
// webppl BayesianDataAnalysisAnswerer.wppl --require ../qa

var questionToLabel = function(question) {
  return qa.butLast(question).split("Is")[1].toLowerCase();
};

var data = qa.readCSV("../../../MultiExperiment2/data/"
	              + "MultiExp2_BayesianAnalysisInput.csv");

console.log("loaded data");
var types = ["branching", "overlapping", "equivocal"];
var domains = ["artifact", "animals", "places", "plants"];
var items = qa.cartesianProductOf([types, domains]);

var modelAnalysis = function() {
  // Sample params
  var alpha = sample(UniformDrift({a:0,b:20,r:2}));
  var beta = sample(UniformDrift({a:0,b:1,r:.1}));

  // Run model and condition on data
  var score = sum(map(function(item) {
    var model = QAmodel(item[0], item[1], alpha, beta);
    var runAnswererModel = model.runAnswererModel;
    var pragA = model.pragA;
    return sum(map(function(question) {
      var itemData = qa.getSubset(data, {type:item[0], domain: item[1],
					 question: questionToLabel(question)});
      var pragERP = runAnswererModel(pragA, question);
      var score = sum(map(function(dataRow) {
	var localScore = pragERP.score(dataRow[5] + ".");
	return localScore;
      }, itemData));

      // Store predictions
      foreach(pragERP.support(),function(s){
        query.add([questionToLabel(question), item[0], item[1], s],
		  Math.exp(pragERP.score(s)));
      });
      return score;
    }, model.questionSpace));
  }, items));

  factor(score);

  return {predictive: query.table, params : {alpha: alpha, beta: beta}};
};

var outputERP = Infer({method: 'MCMC', samples: 3, burn: 0, verbose: true},
		      modelAnalysis);

console.log('inference complete... printing');

qa.bayesianErpWriter(outputERP, "data/BayesianAnswererAnalysis_drift_");
