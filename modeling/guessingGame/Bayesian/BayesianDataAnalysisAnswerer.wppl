// Run as:
// webppl BayesianDataAnalysisAnswerer.wppl --require ../qa

var questionToLabel = function(question) {
  return qa.butLast(question).split("Is")[1].toLowerCase();
};

var data = qa.readCSV("../../../MultiExperiment2/data/"
	              + "MultiExp2_BayesianAnalysisInput.csv");

console.log("loaded data");
var types = ["branching", "overlapping", "equivocal"];
var domains = ["artifact", "animals", "places", "plants"];
var items = qa.cartesianProductOf([types, domains]);

var modelAnalysis = function() {
  // Sample params
  var rawAlpha = uniformDraw(_.range(6, 10.01, 0.1)),
      alpha = Number.parseFloat(rawAlpha.toFixed(3));
  var rawBeta = uniformDraw(_.range(0, 1.01, 0.25)),
      beta = Number.parseFloat(rawBeta.toFixed(3));
  var answererType = 'pragmatic';

  globalStore.predictives = {};

  // Run model and condition on data
  var score = sum(map(function(item) {
    var model = QAmodel(item[0], item[1], alpha, beta);
    var runAnswererModel = model.runAnswererModel;
    return sum(map(function(question) {
      var itemData = qa.getSubset(data, {type:item[0], domain: item[1],
  					 question: questionToLabel(question)});
      var answererERP = runAnswererModel(question, answererType);
      // Store predictions
      foreach(answererERP.support(),function(s){
	var key = [questionToLabel(question), item[0], item[1], s, 
	    	   alpha, beta, answererType].join(",");
	var newPair = _.zipObject([key], [Math.exp(answererERP.score(s))]);
        globalStore.predictives = extend(globalStore.predictives, newPair);
      });

      return sum(map(function(dataRow) {
  	var localScore = answererERP.score(dataRow[5] + ".");
  	return localScore;
      }, itemData));
    }, model.questionSpace));
  }, items));
  
  console.log([alpha,beta,answererType]);
  factor(score);

  return {predictive: globalStore.predictives, 
	  params : {alpha: alpha, beta: beta,
		    modelType: answererType}};
};

var outputERP = Infer({method: 'enumerate'}, modelAnalysis);

// console.log('inference complete... printing');

qa.bayesianErpWriter(outputERP, "data/answerer_PragOnly");
