// Run as:
// webppl genAnswererPredictions.wppl --require ../qa

var main = function(){

  // setting ranges
  var rationalityPs = _.range(1, 10, .1);
  var types = ["branching", "overlapping", "equivocal"];
  var domains = ["artifact", "animals", "places", "plants"];
  var uniformSettings = [true, false];

  map(function(assumeUniform) {
    // different files for different priors
    var uniformStr = assumeUniform ? "Unif" : "Emp";
    var fileName = "answererPredictions" + uniformStr + ".raw.csv";
    qa.writeCSV([["type", "domain", "modelLevel",
		  "utterance", "rationality", "response", "modelProb"]], fileName);
    map(function(type) {
      map(function(domain) {
	// Set up file
	var model = QAmodel(type, domain, assumeUniform);
	var runAnswererModel = model.runAnswererModel;
	map(function(rationality) {
	  // Set up r to be nice
	  var r = rationality.toFixed(1);

	  map(function(question) {
            // // get relevant parameters
	    var shortQuestion = qa.butLast(question.split("Is")[1].toLowerCase());

            var litA = model.litA;
            var litERP = runAnswererModel(litA, question, r);
            var litLabel = [type, domain, "literal", shortQuestion, r];
	    qa.writeERP(litERP, litLabel, fileName, 2);

            var pragA = model.pragA;
	    var pragERP = runAnswererModel(pragA, question, r);
            var pragLabel = [type, domain,"pragmatic", shortQuestion, r];
	    qa.writeERP(pragERP, pragLabel, fileName, 2);

            var expA = model.expA;		       
	    var expERP = runAnswererModel(expA, question, r);
	    var expLabel = [type,domain,"explicit", shortQuestion, r];
	    qa.writeERP(expERP, expLabel, fileName, 2);
	    
	  }, model.questionSpace);
	}, rationalityPs);
      }, domains);
    }, types);
  }, uniformSettings);
  return 'done';
};

main();
