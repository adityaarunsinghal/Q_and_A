var runQuestioner = function() {
  var questionerData = qa.readCSV('../../data/experiment3/questionFromMongo.csv')
  var questionerPredictions = qa.readJSON('../experiment3/spatialQuestionerOutput_HierarchicalVersion.json');

  return Infer({method: 'enumerate'}, function() {
    var rationality = uniformDraw([1, 2, 4, 8, 16]);
    var model = SpatialModel(rationality, rationality);
    var questioner = model.questioner;
    var type = flip() ? 'explicit' : 'pragmatic';
    mapData({data: questionerData}, function(response) {
      var rawState = JSON.parse(response['gridState']);
      console.log(type, rationality, response)
      var state = {'safe' : sort(rawState['safe']),
		   'unsafe' : sort(rawState['unsafe'])};
      var goal = response['goal'] == 'columns' ? ['1', '2', '3'] : ['A', 'B', 'C'];
      var prediction = questioner(type, goal, state);
      console.log(prediction);
      var score = prediction.score('is_' + response['question'] + '_safe?');
      console.log(score)
      factor(score);
    });

    return {type, rationality};
  });
};

var runAnswerer = function() {
  var answererData = qa.readCSV('../../data/experiment3/answerFromMongo_clean.csv');
  console.log('data loaded');

  Infer({method: 'enumerate'}, function() {
    var rationality = uniformDraw([1, 2, 4, 8, 16]);
    var model = SpatialModel(rationality, rationality);
    var answerer = model.answerer;
    var type = flip() ? 'explicit' : 'pragmatic';
    console.log(type, rationality);
    mapData({data: answererData}, function(response) {
      console.log(response['gridState']);
      var rawState = JSON.parse(response['gridState']);
      var state = {'safe' : sort(rawState['safe']),
		   'unsafe' : sort(rawState['unsafe'])};
      var world = JSON.parse(response['underlyingWorld']);
      var question = 'is_' + response['cellAskedAbout'] + '_safe?';
      var trueAnswer = map(function(v) {return v + '_' + world[v]},
			   JSON.parse(response['answer']))
      var prediction = answerer(type, question, world, state);
      // console.log(prediction);
      // console.log(trueAnswer);      
      var score = prediction.score(trueAnswer);
      factor(_.isFinite(score) ? score : -1000);
    });

    return {type, rationality};
  });
};

// results:
    // {"type":"pragmatic","rationality":4} : 1
    // {"type":"pragmatic","rationality":8} : 4.882392096787725e-30
    // {"type":"pragmatic","rationality":2} : 1.9159778996963667e-36
    // {"type":"pragmatic","rationality":1} : 5.089514107245257e-65
    // {"type":"explicit","rationality":16} : 5.4485340424468476e-86
    // {"type":"explicit","rationality":8} : 5.4485340424468476e-86
    // {"type":"explicit","rationality":4} : 5.4485340424468476e-86
    // {"type":"explicit","rationality":2} : 5.4485340424468476e-86
    // {"type":"explicit","rationality":1} : 5.4485340424468476e-86
    // {"type":"pragmatic","rationality":16} : 2.7949559144260474e-306

var getPredictions = function() {
  var bestRationality = 4;
  var model = SpatialModel(bestRationality, bestRationality);
  foreach(modelOutput.support(), function(s){
    var key = _.values(_.omit(c, 'context')).concat(s);
    var newPair = _.zipObject([key], [modelOutput.score(s)]);
    globalStore.predictives = extend(globalStore.predictives, newPair);
  });

}
runAnswerer();
