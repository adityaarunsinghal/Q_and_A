var getQuestionerPredictions = function(questionerType) {
  var bestQRationality = 11;
  var bestARationality = 3;
  var bestAnswerCost = 1.5;
  var model = SpatialModel(bestQRationality, bestARationality, bestAnswerCost);
  var questionerData = qa.readCSV('../qa/questionFromMongo_qualitative.csv');
  var questioner = model.questioner;
  foreach(questionerData, function(datum) {
    var rawState = JSON.parse(datum['gridState']);
    var state = {'safe' : sort(rawState['safe']),
		 'unsafe' : sort(rawState['unsafe'])};
    var goal = datum['goal'] == 'columns' ? ['1', '2', '3'] : ['A', 'B', 'C'];
    var prediction = questioner(questionerType, goal, state);
    foreach(prediction.support(), function(s){
      var key = _.values(datum).concat(s);
      var newPair = _.zipObject([key], [prediction.score(s)]);
      globalStore.predictives = extend(globalStore.predictives, newPair);
    });
  });
  return globalStore.predictives;
};

//console.log(getQuestionerPredictions());

var getAnswererPredictions = function(answererType) {
  var bestQRationality = 19;
  var bestARationality = 3;
  var bestAnswerCost = 1;
  var model = SpatialModel(bestQRationality, bestARationality, bestAnswerCost);
  var answererData = qa.readCSV('../qa/answerFromMongo_fixed.csv');//qa.readCSV('../../data/experiment3/questionFromMongo_clean.csv');
  var answerer = model.answerer;
  foreach(answererData, function(datum) {
    var rawState = JSON.parse(datum['gridState']);
    var state = {'safe' : sort(rawState['safe']),
		 'unsafe' : sort(rawState['unsafe'])};
    var world = JSON.parse(datum['underlyingWorld']);
    var question = 'is_' + datum['cellAskedAbout'] + '_safe?';
    var trueAnswer = map(function(v) {return v + '_' + world[v]},
    			 JSON.parse(datum['answer']));
    var prediction = answerer(answererType, question, world, state);

    foreach(prediction.support(), function(s){
      var key = _.values(datum).concat(s);
      var newPair = _.zipObject([key], [prediction.score(s)]);
      globalStore.predictives = extend(globalStore.predictives, newPair);
    });
  });
  return globalStore.predictives;
};

console.log(getAnswererPredictions('explicit'));
